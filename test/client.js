'use strict';

var assert = require('assert');

var helper = require('./helper');
var cBinded = require('../index');
var GearmanClient = cBinded.GearmanClient;

describe('client', function () {
  beforeEach(helper.startGearmanServer);
  afterEach(helper.stopGearmanServer);

  describe('doBackground', function() {
    it('should store the data on gearman', function (done) {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);
      client.doJobBackground('queue', 'data', 'unique', function(status, handler) {
        assert.equal(cBinded.GEARMAN_SUCCESS, status);
        assert.equal(String, handler.constructor);

        helper.readAllJobs('queue', function(err, data) {
          assert.ifError(err);

          assert.equal(1, data.length);
          assert.equal(handler, data[0].handle);
          assert.equal('data', data[0].workload);
          assert.equal('queue', data[0].func);
          assert.equal('unique', data[0].unique);
          assert.equal(4, Object.keys(data[0]).length);

          done();
        });
      });
    });

    it('should store the data on gearman with different data', function (done) {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);
      client.doJobBackground('foo', 'blablabla', 'not unique', function(status, handler) {
        assert.equal(cBinded.GEARMAN_SUCCESS, status);
        assert.equal(String, handler.constructor);

        helper.readAllJobs('foo', function(err, data) {
          assert.ifError(err);

          assert.equal(1, data.length);
          assert.equal(handler, data[0].handle);
          assert.equal('blablabla', data[0].workload);
          assert.equal('foo', data[0].func);
          assert.equal('not unique', data[0].unique);
          assert.equal(4, Object.keys(data[0]).length);

          done();
        });
      });
    });

    it('should store the data on gearman without unique', function (done) {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);
      client.doJobBackground('foo', 'blablabla', null, function(status, handler) {
        assert.equal(cBinded.GEARMAN_SUCCESS, status);
        assert.equal(String, handler.constructor);

        helper.readAllJobs('foo', function(err, data) {
          assert.ifError(err);

          assert.equal(1, data.length);
          assert.equal(handler, data[0].handle);
          assert.equal('blablabla', data[0].workload);
          assert.equal('foo', data[0].func);
          // generated by gearman server
          assert.equal(36, data[0].unique.length);
          assert.equal(4, Object.keys(data[0]).length);

          done();
        });
      });
    });

    it('should return error if gearman is unreachable', function (done) {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);

      helper.stopGearmanServer(function() {
        client.doJobBackground('queue', 'data', 'unique', function(status, handler) {
          assert.equal(cBinded.GEARMAN_COULD_NOT_CONNECT, status);
          assert.equal(undefined, handler);

          done();
        });
      });
    });

    it('should return error if gearman is unreachable on second', function (done) {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);

      client.doJobBackground('queue', 'data', 'unique', function(status) {
        assert.equal(cBinded.GEARMAN_SUCCESS, status);

        helper.stopGearmanServer(function() {
          client.doJobBackground('queue', 'data', 'unique', function(status, handler) {
            assert.equal(cBinded.GEARMAN_LOST_CONNECTION, status);
            assert.equal(undefined, handler);

            done();
          });
        });
      });
    });
  });

  describe('getMultipleTask', function () {
    it('should return a multiple task object', function () {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);

      var mTask = client.getMultipleTask();

      assert.equal(cBinded.MultipleTask, mTask.constructor);
    });
  });

  /*
  describe('MultipleTask', function () {
    it('should store the added tasks', function (done) {
      var client = new GearmanClient();
      client.addServer('127.0.0.1', 4731);

      var mTask = client.getMultipleTask();

      mTask.addJobBackground('queue')
    });
  });
  */
});
